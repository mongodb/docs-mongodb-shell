.. _mdb-shell-connect:

=======================
Connect to a Deployment
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Ensure that a MongoDB deployment is running before attempting to 
connect to it with ``mongosh``.

Local MongoDB Instance on Default Port
--------------------------------------

You can run ``mongosh`` without any command-line options
to connect to a MongoDB instance running on your **localhost** with 
**default port** 27017:

.. code-block:: sh

   mongosh

Local MongoDB Instance on a Non-Default Port
--------------------------------------------

To specify a port to connect to on localhost, use the 
:manual:`connection string </reference/connection-string>` format. For 
example, to connect to a MongoDB instance running on localhost with a 
non-default port 28015:

.. code-block:: sh

   mongosh "localhost:28015"

MongoDB Instance on a Remote Host
---------------------------------

To specify a remote host and port, use a :manual:`connection string
</reference/connection-string>`. For example, to connect to a MongoDB
instance running on a remote host machine on port 28015:

  .. code-block:: sh

     mongosh "mongodb://mongodb0.example.com:28015"

  .. note:: Connecting to |service|

     If your remote host is a |service-fullname| cluster, you can copy 
     your connection string from the |service| UI. To learn more, see 
     :atlas:`Connect to a Cluster <connect-to-cluster/#use-the-connect-dialog-to-connect-to-your-cluster>`.

Connection Considerations
-------------------------

Authentication
~~~~~~~~~~~~~~

To connect to a MongoDB instance requires authentication:

- You can specify the username, password, and authentication database 
  in the :manual:`connection string </reference/connection-string>`. 
  For example, to connect to a remote MongoDB instance and
  authenticate against the ``admin`` database as user ``alice``:

  .. code-block:: sh

     mongosh "mongodb://alice:<password>@mongodb0.examples.com:28015/?authSource=admin"

- You can use the ``--username``, ``--password``, and
  ``--authenticationDatabase`` command-line options. For example, to
  connect to a remote MongoDB instance and authenticate against the 
  ``admin`` database as user ``alice``:

  .. code-block:: sh

     mongosh "mongodb://mongodb0.example.com:28015" --username alice --password <password> --authenticationDatabase admin

  .. note::

     If you don't provide a ``--password`` value, ``mongosh`` prompts 
     you for one.

Connecting to a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a replica set:

- You can specify the replica set name and members in the
  :manual:`connection string </reference/connection-string>`:

  .. code-block:: sh

     mongosh "mongodb://mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017/?replicaSet=replA"

- If you are using the :manual:`DNS Seedlist Connection Format 
  </reference/connection-string/#dns-seedlist-connection-format>`, you 
  can include the ``+srv`` modifier in your connection string:

  .. code-block:: sh

     mongosh "mongodb+srv://server.example.com/"

  .. note::
     Using the ``+srv`` connection string modifier automatically sets 
     the 
     :manual:`tls option </reference/connection-string/#urioption.tls>` 
     to ``true`` for the connection. You can 
     override this behavior by explicitly setting ``tls`` to ``false``.

TLS Connections
~~~~~~~~~~~~~~~

For ``tls`` connections:

- You can use the 
  :manual:`tls option </reference/connection-string/#urioption.tls>` to 
  set ``tls=true`` in the 
  :manual:`connection string </reference/connection-string>`:

  .. code-block:: sh

     mongosh "mongodb://mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017/?replicaSet=replA&tls=true"

- If you are using the :manual:`DNS Seedlist Connection Format 
  </reference/connection-string/#dns-seedlist-connection-format>`, the 
  ``+srv`` connection string modifier automatically sets
  the ``tls`` option to ``true`` for the connection:

  .. code-block:: sh

     mongosh "mongodb+srv://server.example.com/"

- You can specify the ``--tls`` command-line option.
  For example, to connect to a remote host:

  .. code-block:: sh

     mongosh "mongodb://mongodb0.example.com:28015" --tls
