.. _mongosh-shell-settings:

================================
Configure :binary:`~bin.mongosh`
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1

The ``config`` API provides methods to examine and update the
:binary:`~bin.mongosh` configuration. Updates made using ``config``
persist between sessions.

.. note::

   The ``config`` API can be used within the :binary:`~bin.mongosh`
   command line interface. It has no effect in the
   :compass:`embedded Compass shell </embedded-shell>`.

Syntax
------

Print the current :binary:`~bin.mongosh` configuration:

.. _mongosh-config:

.. code-block:: javascript

   config 

Return the current value for ``<property>``:

.. code-block:: javascript

   config.get( "<property>" )

.. _mongosh-config-set:

Change the current setting of ``<property>`` to ``<value>``:

.. code-block:: javascript

   config.set( "<property>", <value> )

Reset a ``<property>`` to the default value:

.. code-block:: javascript

   config.reset( "<property>" )

Supported ``property`` parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 25 13 14 47

   * - Key
     - Type
     - Default
     - Description

   * - ``displayBatchSize``
     - integer
     - 20
     - The number of items displayed per cursor iteration

   * - ``enableTelemetry``
     - boolean
     - true
     - Enables sending anonymized tracking and diagnostic data to
       MongoDB. 

   * - ``editor``
     - string
     - null
     - Designates an editor to use within the :binary:`~bin.mongosh`
       console. Overrides the ``EDITOR`` environment variable if set.

   * - ``historyLength``
     - integer
     - 1000
     - The number of items to store in :binary:`~bin.mongosh` REPL's
       history file.

   * - ``inspectCompact``
     - integer or boolean
     - 3
     - The level of inner elements that :binary:`~bin.mongosh` outputs
       on a single line. Short array elements are also grouped together
       on a single line.
       
       If set to ``false``, :binary:`~bin.mongosh` outputs each field
       on its own line.

   * - ``inspectDepth``
     - integer or Infinity
     - 6
     - The depth to which objects are printed. Setting ``inspectDepth``
       to ``Infinity`` (the javascript object) prints all nested
       objects to their full depth. 

   * - ``redactHistory``
     - string
     - ``remove``
     - Controls what information is recorded in the shell history.
       Must be one of:

       - ``keep``: Retain all history.
       - ``remove``: Remove lines which contain sensitive information.
       - ``remove-redact``: Redact sensitive information.

   * - ``showStackTraces``
     - boolean
     - false
     - Controls display of a stack trace along with error messages.

   * - ``snippetAutoload``
     - boolean
     - true
     - If ``true``, automatically load installed
       :ref:`snippets <snip-overview>` at startup.

   * - ``snippetIndexSourceURLs``
     - string
     - `MongoDB Repository
       <https://compass.mongodb.com/mongosh/snippets-index.bson.br>`__
     - A semicolon-separated list of URLs that link to a
       :ref:`snippet <snip-overview>` registry.

   * - ``snippetRegistryURL``
     - string
     - `npm Registry <https://registry.npmjs.org>`__
     - The npm registry used by the :binary:`~bin.mongosh` npm client
       that installs :ref:`snippet <snip-overview>`.

.. _customize-the-mongosh-prompt:

Customize the :binary:`~bin.mongosh` Prompt
-------------------------------------------

The ``prompt`` variable can store strings and JavaScript code to
customize the :binary:`~bin.mongosh` prompt. Use a function that
returns a string to display dynamic information in the prompt.

Custom prompts are not stored when you exit :binary:`~bin.mongosh`. Add
the code for your custom prompt to :ref:`.mongoshrc.js <mongoshrc-js>`
to set the prompt each time you start up :binary:`~bin.mongosh`.

Display Line Numbers
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/examples/ex-display-line-numbers.rst

Display Database and Hostname
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/examples/ex-display-dbname-and-hostname.rst

Display System Up Time and Document Count
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/examples/ex-display-system-uptime.rst

Behavior
--------

Remove or Redact Sensitive Information From History
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:binary:`~bin.mongosh` makes "best-effort" attempts to match patterns
that normally correspond to certain kinds of sensitive information.

There are
`patterns <https://github.com/mongodb-js/redact/blob/master/lib/regexes.js>`__
that match:

- Certificates and keys
- Generic user directories
- Email addresses
- IP addresses
- URLs
- MongoDB connection strings
- Compass schema URL fragments
- Electron application resources

Certain operations, such as :method:`connect()`, are considered
inherently sensitive. If ``redactHistory`` is set to ``remove`` or
``remove-redact``, lines with these operations will be removed from the
:ref:`command line history <mdb-shell-command-history>`.

Other operations, like :method:`~db.collection.find()`, sometimes have
sensitive information like email addresses. The
:ref:`shell history <mdb-shell-command-history>` will retain these
lines as entered unless ``redactHistory`` is set to ``remove-redact``.

Examples
--------

Update Number of Items Returned by a Cursor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider viewing a collection with a number of large documents. You can
update the ``batchSize`` to limit the number of items returned by a
cursor.

.. code-block:: javascript

   config.set("displayBatchSize", 3) 


Future ``db.collection.find()`` operations will only return 3 documents
per cursor iteration.

Turn On Stack Traces
~~~~~~~~~~~~~~~~~~~~

Enable stack traces to see more detailed error reporting. 

.. code-block:: javascript

   config.set("showStackTraces", true)

The output differs like this: 

.. code-block:: javascript
   :copyable: false

   // showStackTraces set to 'false'
   Enterprise> db.orders.find( {}, { $thisWontWork: 1 } )
   MongoError: FieldPath field names may not start with '$'.

   // showStackTraces set to 'true'
   Enterprise> db.orders.find( {}, { $thisWontWork: 1 } )
   Uncaught:
   MongoError: FieldPath field names may not start with '$'.
       at MessageStream.messageHandler (/usr/bin/mongosh:58878:20)
       at MessageStream.emit (events.js:315:20)
       at MessageStream.EventEmitter.emit (domain.js:548:15)
       at processIncomingData (/usr/bin/mongosh:57954:12)
       at MessageStream._write (/usr/bin/mongosh:57850:5)
       at writeOrBuffer (_stream_writable.js:352:12)
       at MessageStream.Writable.write (_stream_writable.js:303:10)
       at Socket.ondata (_stream_readable.js:719:22)
       at Socket.emit (events.js:315:20)
       at Socket.EventEmitter.emit (domain.js:548:15)

Call ``config`` API from outside :binary:`~bin.mongosh`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can call the ``config`` API from the command line using
:option:`--eval` with :binary:`~bin.mongosh`. In this case the
:option:`--nodb` option means :binary:`~bin.mongosh` will update
without connecting to a MongoDB database.

.. important::

   You must use different quotation marks for the :option:`--eval`
   expression and the ``config`` property. That is, single quotes for
   one and double quotes for the other. 

.. code-block::

   mongosh --nodb --eval 'config.set("enableTelemetry", true)'

:binary:`~bin.mongosh` returns additional information along with the
result of the API call.

.. code-block::
   :copyable: false

   Current Mongosh Log ID:	609583b730e14918fa0d363f
   Using MongoDB:		undefined
   Using Mongosh Beta:	0.12.1

   For mongosh info see: https://docs.mongodb.com/mongodb-shell/

   Setting "enableTelemetry" has been changed

Redact Sensitive Information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Compare the recalled history when ``redactHistory`` is set to
``remove-redact`` or ``remove``. 

Set ``redactHistory`` to ``remove-redact`` mode and enter a query
containing an email address. 

.. code-block:: javascript

   config.set( "redactHistory", "remove-redact" )
   db.contacts.find( {"email": "customer@clients.com" } )

When you press the ``up arrow`` to replay the last command the email
address is redacted. 

.. code-block:: javascript
   :copyable: false

   db.contacts.find( {"email": "<email>" } )  // Redacted

Set ``redactHistory`` to ``remove`` mode and enter a query containing
an email address. 

.. code-block:: javascript

   config.set( "redactHistory", "remove" )
   db.contacts.find( {"email": "customer@clients.com" } )

When you press the ``up arrow`` to replay the last command the email
address is present. 

.. code-block:: javascript
   :copyable: false

   db.contacts.find( {"email": "customer@clients.com" } )

The :ref:`shell history <mdb-shell-command-history>` reflects the
changes. (Note that this stores the most recent input first.)

.. code-block:: javascript
   :copyable: false

   db.contacts.find( {"email": "customer@clients.com" } )
   config.set( "redactHistory", "remove" )
   db.contacts.find( {"email": "<email>" } )
   config.set( "redactHistory", "remove-redact" )

.. _example-reset-setting:

Reset a Configuration Setting to the Default Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you modified a configuration setting and want to reset it to the
default value, use ``config.reset( "<property>" )``.

#. Change the value of the ``historyLength`` setting to ``2000``:

   .. code-block:: javascript

      config.set("historyLength", 2000)

#. Verify the updated value for ``historyLength``:

   .. code-block:: javascript

      config.get("historyLength")

#. Reset the ``historyLength`` setting to the default value of ``1000``:

   .. code-block:: javascript

      config.reset("historyLength")

#. Verify the updated value for ``historyLength``:

   .. code-block:: javascript

      config.get("historyLength")
