.. _compatibility:

=================================================
Compatibility Changes with Legacy ``mongo`` Shell
=================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following behaviors in ``mongosh`` affect compatibility with
operations performed in the legacy ``mongo`` shell.

Deprecated Methods
------------------

The following shell methods are deprecated in ``mongosh``. Instead, use
the methods listed in the :guilabel:`Alternative Resources` column.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 10 10

   * - Deprecated Method
     - Alternative Resources

   * - ``db.collection.copyTo()``
     -   Aggregation stage: :pipeline:`$out`

   * - ``db.collection.insert()``
     - - :method:`db.collection.insertOne()`
       - :method:`db.collection.insertMany()`
       - :method:`db.collection.bulkWrite()`

   * - ``db.collection.remove()``
     - - :method:`db.collection.deleteOne()`
       - :method:`db.collection.deleteMany()`
       - :method:`db.collection.findOneAndDelete()`
       - :method:`db.collection.bulkWrite()`

   * - ``db.collection.save()``
     - - :method:`db.collection.insertOne()`
       - :method:`db.collection.insertMany()`
       - :method:`db.collection.updateOne()`
       - :method:`db.collection.updateMany()`
       - :method:`db.collection.findOneAndUpdate()`

   * - ``db.collection.update()``
     - - :method:`db.collection.updateOne()`
       - :method:`db.collection.updateMany()`
       - :method:`db.collection.findOneAndUpdate()`
       - :method:`db.collection.bulkWrite()`

   * - ``Mongo.getSecondaryOk``
     - :method:`Mongo.getReadPrefMode`
 
   * - ``Mongo.isCausalConsistency``
     - :method:`Session.getOptions()`

   * - ``Mongo.setSecondaryOk``
     - :method:`Mongo.setReadPref`
     
   * - ``rs.secondaryOk``
     - No longer required. See 
       :ref:`Read Operations on a Secondary Node <read-on-secondary-nodes>`.

Read Preference Behavior
------------------------

.. _read-on-secondary-nodes:

Read Operations on a Secondary Node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When using ``mongosh`` to connect directly to a :term:`secondary`
replica set member, you do not have to explicitly enable secondary
reads with ``rs.secondaryOk()``.

You can read from a secondary member if you specify a
:manual:`read preference </core/read-preference/>` of either:

- :readmode:`primaryPreferred`
- :readmode:`secondary`
- :readmode:`secondaryPreferred`

To specify a read preference, you can use either:

- The :urioption:`readPreference` connection string option when
  connecting to the node.

- The :method:`Mongo.setReadPref()` method.

The legacy ``mongo`` shell required running ``rs.secondaryOk()`` to
enable secondary reads.

``show`` Helper Methods
~~~~~~~~~~~~~~~~~~~~~~~

The following ``show`` helper methods always use a read preference of
``primaryPreferred``, even when a different read preference has been
specified for the operation:

- ``show dbs``
- ``show databases``
- ``show collections``
- ``show tables``

In the legacy ``mongo`` shell, these operations use the specified read
preference.

Numeric Values
--------------

The legacy ``mongo`` shell stored numerical values as ``doubles`` by
default. In ``mongosh`` numbers are stored as 32 bit ``int`` types when
possible or else as ``double``. 

The preferred types for numeric variables are different in MongoDB 
Shell than the types suggested in the legacy ``mongo`` shell. The types
in ``mongosh`` better align with the types used by the MongoDB Drivers.

.. list-table::
   :header-rows: 1

   * - ``mongo`` type
     - ``mongosh`` type

   * - ``NumberInt``
     - ``Int32``

   * - ``NumberLong``
     - ``Long``

   * - ``NumberDecimal``
     - ``Decimal128``

.. warning::

   Data types may be stored inconsistently if you connect to the same
   collection using both ``mongosh`` and the legacy ``mongo`` shell. 

Consider the ``typeExample`` collection. This collection consists of
two identical documents, ``{ "a": 1 }``. The first document was created
in the legacy ``mongo`` shell, the second document was created in
``mongosh``. 

We can use the :expression:`$type` operator in an aggregation pipeline
to see the type that was assigned in each shell. 

.. code-block:: javascript

   db.typeExample.aggregate( 
     [ 
       {
          $project: 
            { 
              "valueType": 
                {
                  "$type": "$a"
                },
              "_id": 0
            }
       }
     ]
   )

In the first document, created in the legacy ``mongo`` shell, the value
was stored as a ``double``. In the ``mongosh`` document the value was
stored as type ``int``.

.. code-block:: javascript
   .. :copyable: false

   [
     { 
        valueType: 'double'  // inserted in legacy mongo shell
     },
     {
        valueType: 'int'     // inserted in mongosh
     }
   ]

.. seealso::

   For more information on managing types, refer to the
   :manual:`schema validation overview </core/schema-validation>`.

