.. _mdb-shell-methods:

===================
``mongosh`` Methods
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/admonitions/fact-mdb-shell-beta.rst

The following document lists the available methods in the |mdb-shell|.
Click a method to see its documentation in the
:manual:`MongoDB Manual </>`, including syntax and examples.

Administration Methods
----------------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`db.adminCommand()`

     - Runs a command against the ``admin`` database.


   * - :method:`db.currentOp()`

     - Reports the current in-progress operations.

   
   * - :method:`db.killOp()`

     - Terminates a specified operation.

   * - :method:`db.shutdownServer()`

     - Shuts down the current :binary:`~mongod` or :binary:`~mongos`
       process cleanly and safely.

   * - :method:`db.fsyncLock()`

     - Flushes writes to disk and locks the database to prevent write
       operations and assist backup operations.

   * - :method:`db.fsyncUnlock()`

     - Allows writes to continue on a database locked with
       :method:`db.fsyncLock()`.

Bulk Operation Methods
----------------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`db.collection.initializeOrderedBulkOp()`

     - Initializes and returns a new :method:`Bulk()` operations builder
       for a collection. The builder constructs an ordered list of write
       operations that MongoDB executes in bulk.

   * - :method:`db.collection.initializeUnorderedBulkOp()`

     - Initializes and returns a new :method:`Bulk()` operations builder
       for a collection. The builder constructs an unordered list of write
       operations that MongoDB executes in bulk.
   
   * - :method:`Bulk()`

     - Creates a bulk operations builder used to construct a list of write
       operations to perform in bulk for a single collection. To instantiate
       the builder, use either the :method:`db.collection.initializeOrderedBulkOp()`
       or the :method:`db.collection.initializeUnorderedBulkOp()` method.

   * - :method:`Bulk.execute()`

     - Executes the list of operations built by the :method:`Bulk()`
       operations builder.

   * - :method:`Bulk.find()`

     - Specifies a query condition for an update or a remove operation.

   * - :method:`Bulk.find.hint()`

     - Sets the **hint** option that specifies the index to support the
       bulk operation.

   * - :method:`Bulk.find.remove()`

     - Adds a remove operation to a bulk operations list.

   * - :method:`Bulk.find.removeOne()`

     - Adds a single document remove operation to a bulk operations list.

   * - :method:`Bulk.find.replaceOne()`

     - Adds a single document replacement operation to a bulk operations
       list.

   * - :method:`Bulk.find.updateOne()`

     - Adds a single document update operation to a bulk operations list.

   * - :method:`Bulk.find.update()`

     - Adds a **multi** update operation to a bulk operations list. The
       method updates specific fields in existing documents.

   * - :method:`Bulk.find.upsert()`

     - Sets the :manual:`upsert </reference/glossary/#term-upsert>` option
       to ``true`` for an update or a replacement operation.

   * - :method:`Bulk.getOperations()`

     - Returns an array of write operations executed through
       :method:`Bulk.execute()`.

   * - :method:`Bulk.insert()`

     - Adds an insert operation to a bulk operations list.

   * - :method:`Bulk.tojson()`

     - Returns a JSON document that contains the number of operations and
       batches in the :method:`Bulk()` object.

   * - :method:`Bulk.tostring()`

     - Returns as a string a JSON document that contains the number of
       operations and batches in the :method:`Bulk()` object.

Collection Methods
------------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`db.collection.aggregate()`

     - Provides access to the
       :manual:`aggregation pipeline </core/aggregation-pipeline>`.

   * - :method:`db.collection.bulkWrite()`

     - Provides bulk write operation functionality.

       .. convertToCapped

   * - :method:`db.collection.count()`

     - Returns a count of the number of documents in a collection or a
       view.

   * - :method:`db.collection.countDocuments()`

     - Returns a count of the number of documents in a collection or a
       view. Wraps the :pipeline:`$group` aggregation stage with a
       :group:`$sum` expression.
   
   * - :method:`db.collection.estimatedDocumentCount()`

     - Returns an approximate count of the documents in a collection or
       a view.

   * - :method:`db.collection.createIndex()`

     - Builds an index on a collection.

   * - :method:`db.collection.createIndexes()`

     - Builds one or more indexes on a collection.

   * - :method:`db.collection.dataSize()`

     - Returns the size of the collection. Wraps the
       :data:`~collStats.size` field in the output of the
       :dbcommand:`collStats`.

   * - :method:`db.collection.deleteOne()`

     - Deletes a single document in a collection.

   * - :method:`db.collection.deleteMany()`

     - Deletes multiple documents in a collection.

   * - :method:`db.collection.distinct()`

     - Returns an array of documents that have distinct values for the
       specified field.

   * - :method:`db.collection.drop()`

     - Removes the specified collection from the database.

   * - :method:`db.collection.dropIndex()`

     - Removes a specified index on a collection.

   * - :method:`db.collection.dropIndexes()`

     - Removes all indexes on a collection.

   * - :method:`db.collection.ensureIndex()`

     - Deprecated. Use :method:`db.collection.createIndex()`.

       .. exists

   * - :method:`db.collection.explain()`

     - Returns information on the query execution of various methods.

   * - :method:`db.collection.find()`

     - Performs a query on a collection or a view and returns a cursor
       object.

   * - :method:`db.collection.findAndModify()`

     - Atomically modifies and returns a single document.

   * - :method:`db.collection.findOne()`

     - Performs a query and returns a single document.

   * - :method:`db.collection.findOneAndDelete()`

     - Finds a single document and deletes it.

   * - :method:`db.collection.findOneAndReplace()`

     - Finds a single document and replaces it.

   * - :method:`db.collection.findOneAndUpdate()`

     - Finds a single document and updates it.

   * - :method:`db.collection.getIndexes()`

     - Returns an array of documents that describe the existing indexes
       on a collection.

       .. getIndexKeys

       .. getIndexSpecs

   * - :method:`db.collection.insert()`

     - Creates a new document in a collection.

   * - :method:`db.collection.insertOne()`

     - Inserts a new document in a collection.

   * - :method:`db.collection.insertMany()`

     - Inserts several new document in a collection.

   * - :method:`db.collection.isCapped()`

     - Reports if a collection is a :term:`capped collection`.

   * - :method:`db.collection.reIndex()`

     - Rebuilds all existing indexes on a collection.

   * - :method:`db.collection.remove()`

     - Deletes documents from a collection.

   * - :method:`db.collection.renameCollection()`

     - Changes the name of a collection.

   * - :method:`db.collection.replaceOne()`

     - Replaces a single document in a collection.

   * - :method:`db.collection.save()`

     - Provides a wrapper around an :method:`~db.collection.insert()`
       and :method:`~db.collection.update()` to insert new documents.

   * - :method:`db.collection.stats()`

     - Reports on the state of a collection. Provides a wrapper around
       the :dbcommand:`collStats`.

   * - :method:`db.collection.storageSize()`

     - Reports the total size used by the collection in bytes. Provides
       a wrapper around the :data:`~collStats.storageSize` field of the
       :dbcommand:`collStats` output.

   * - :method:`db.collection.totalIndexSize()`

     - Reports the total size used by the indexes on a collection.
       Provides a wrapper around the :data:`~collStats.totalIndexSize`
       field of the :dbcommand:`collStats` output.

   * - :method:`db.collection.totalSize()`

     - Reports the total size of a collection, including the size of
       all documents and all indexes on a collection.

   * - :method:`db.collection.update()`

     - Modifies a document in a collection.

   * - :method:`db.collection.updateOne()`

     - Modifies a single document in a collection.

   * - :method:`db.collection.updateMany()`

     - Modifies multiple documents in a collection.

Connection Methods
------------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`Mongo.getDB()`

     - Returns a database object.

   * - :method:`Mongo.setReadPref()`

     - Sets the :term:`read preference` for the MongoDB connection.

Cursor Methods
--------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`cursor.addOption()`

     - Adds special wire protocol flags that modify the behavior of the
       query.

   * - :method:`cursor.allowPartialResults()`

     - Allows :method:`db.collection.find()` operations against a
       sharded collection to return partial results, rather than an
       error, if one or more queried shards are unavailable.

       .. arrayAccess

   * - :method:`cursor.batchSize()`

     - Controls the number of documents MongoDB will return to the
       client in a single network message.

       .. clone

   * - :method:`cursor.close()`

     - Close a cursor and free associated server resources.

   * - :method:`cursor.collation()`

     - Specifies the collation for the cursor returned by the
       :method:`db.collection.find()`.

   * - :method:`cursor.comment()`

     - Attaches a comment to the query to allow for traceability in the
       logs and the system.profile collection.

   * - :method:`cursor.count()`

     - Modifies the cursor to return the number of documents in the
       result set rather than the documents themselves.

   * - :method:`cursor.explain()`

     - Reports on the query execution plan for a cursor.

   * - :method:`cursor.forEach()`

     - Applies a JavaScript function for every document in a cursor.

   * - :method:`cursor.hasNext()`

     - Returns ``true`` if the cursor has documents and can be iterated.

   * - :method:`cursor.hint()`

     - Forces MongoDB to use a specific index for a query.

   * - :method:`cursor.isClosed()`

     - Returns ``true`` if the cursor is closed.

   * - :method:`cursor.isExhausted()`

     - Returns ``true`` if the cursor is closed *and* there are no
       objects remaining in the batch.

   * - :method:`cursor.itcount()`

     - Computes the total number of documents in the cursor client-side
       by fetching and iterating the result set.

   * - :method:`cursor.limit()`

     - Constrains the size of a cursor's result set.

   * - :method:`cursor.map()`

     - Applies a function to each document in a cursor and collects the
       return values in an array.

   * - :method:`cursor.max()`

     - Specifies an exclusive upper index bound for a cursor. For use
       with :method:`cursor.hint()`

   * - :method:`cursor.maxTimeMS()`

     - Specifies a cumulative time limit in milliseconds for processing
       operations on a cursor.

   * - :method:`cursor.min()`

     - Specifies an inclusive lower index bound for a cursor. For use
       with :method:`cursor.hint()`

   * - :method:`cursor.next()`

     - Returns the next document in a cursor.

   * - :method:`cursor.noCursorTimeout()`

     - Instructs the server to avoid closing a cursor automatically
       after a period of inactivity.

       .. oplogReplay

       .. projection

   * - :method:`cursor.objsLeftInBatch()`

     - Returns the number of documents left in the current cursor batch.

   * - :method:`cursor.readPref()`

     - Specifies a :term:`read preference` to a cursor to control how
       the client directs queries to a :term:`replica set`.

   * - :method:`cursor.returnKey()`

     - Modifies the cursor to return index keys rather than the
       documents.

   * - :method:`cursor.showRecordId()`

     - Adds an internal storage engine ID field to each document
       returned by the cursor.

   * - :method:`cursor.size()`

     - Returns a count of the documents in the cursor after applying
       :method:`~cursor.skip()` and :method:`~cursor.limit()` methods.

   * - :method:`cursor.skip()`

     - Returns a cursor that begins returning results only after
       passing or skipping a number of documents.

   * - :method:`cursor.sort()`

     - Returns results ordered according to a sort specification.

   * - :method:`cursor.tailable()`

     - Marks the cursor as tailable. Only valid for cursors over capped 
       collections.

   * - :method:`cursor.toArray()`

     - Returns an array that contains all documents returned by the
       cursor.

Database Methods
----------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`db.aggregate()`

     - Runs admin/diagnostic pipeline which does not require an
       underlying collection.
     
   * - :method:`db.createCollection()`
     
     - Creates a new collection or view.

   * - :method:`db.createView()`

     - Creates a view as the result of applying the specified
       aggregation pipeline to the source collection or view.

   * - :method:`db.commandHelp()`

     - Displays help text for the specified database command.

   * - :method:`db.dropDatabase()`

     - Removes the current database.

   * - :method:`db.getCollection()`

     - Returns a collection or view object. Used to access collections
       with names that are not valid in the :binary:`~bin.mongo` shell.

   * - :method:`db.getCollectionInfos()`

     - Returns collection information for all collections and views in
       the current database.

   * - :method:`db.getCollectionNames()`

     - Lists all collections and views in the current database.

   * - :method:`db.getLastError()`

     - Checks and returns the status of the last operation. Wraps
       :dbcommand:`getLastError`.

   * - :method:`db.getLastErrorObj()`

     - Returns the status document for the last operation. Wraps
       :dbcommand:`getLastError`.

   * - :method:`db.getMongo()`

     - Returns the current database connection.

   * - :method:`db.getLogComponents()`

     - Returns the current log verbosity settings.

   * - :method:`db.getName()`

     - Returns the name of the current database.

   * - :method:`db.getProfilingStatus()`

     - Returns the current :manual:`profile level
       </reference/command/profile/#dbcmd.profile>`, :manual:`slowOpThresholdMs
       </reference/configuration-options/#operationProfiling.slowOpThresholdMs>`
       setting, and :manual:`slowOpSampleRate
       </reference/configuration-options/#operationProfiling.slowOpSampleRate>`
       setting.

   * - :method:`db.getSiblingDB()`

     - Provides access to the specified database.

   * - :method:`db.listCommands()`

     - Provides a list of all database commands.

   * - :method:`db.logout()`

     - Ends an authenticated session.

   * - :method:`db.runCommand()`

     - Runs a :manual:`database command </reference/command>`.

   * - :method:`db.setLogLevel()`

     - Sets a single verbosity level for :manual:`log messages
       </reference/log-messages/>`.

   * - :method:`db.setProfilingLevel()`
     
     - Configures the database :manual:`profiler level
       </reference/method/db.setProfilingLevel/#set-profiling-level-level>`,
       :manual:`slowms
       </reference/method/db.setProfilingLevel/#set-profiling-level-options-slowms>`,
       and :manual:`sampleRate
       </reference/method/db.setProfilingLevel/#set-profiling-level-options-samplerate>`.

Free Monitoring Methods
-----------------------

Starting in MongoDB 4.0, MongoDB (Community Edition) offers
:manual:`free cloud monitoring </administration/free-monitoring/>` for
standalone and replica set deployments.

.. note::

   Free cloud monitoring is only available for MongoDB Community
   Edition.

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`db.disableFreeMonitoring()`

     - Disables free cloud monitoring for your deployment.

   * - :method:`db.enableFreeMonitoring()`

     - Enables free cloud monitoring for your deployment.

   * - :method:`db.getFreeMonitoringStatus()`

     - Returns the free cloud monitoring status for your deployment.

Server Status Methods
---------------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`db.hostInfo()`

     - Returns a document with information about the system running
       the MongoDB instance.

   * - :method:`db.isMaster()`

     - Returns a document that describes the role of the
       :binary:`~bin.mongod` instance.

       If the :binary:`~bin.mongod` is a member of a
       replica set, then the :data:`~isMaster.ismaster` and
       :data:`~isMaster.secondary` fields report if the instance is the
       :term:`primary` or if it is a :term:`secondary` member of the
       replica set.

   * - :method:`db.collection.latencyStats()`

     - Returns latency statistics for a specified collection.

   * - :method:`db.printCollectionStats()`

     - Returns statistics from every collection.

   * - :method:`db.serverBuildInfo()`

     - Returns a document that displays the compilation parameters for
       the :binary:`~bin.mongod` instance.

   * - :method:`db.serverCmdLineOpts()`

     - Returns a document with information about the runtime options
       used to start the MongoDB instance.

   * - :method:`db.serverStatus()`

     - Returns a document that provides an overview of the database
       process.

   * - :method:`db.stats()`

     - Returns a document that reports on the state of the current
       database.

   * - :method:`db.version()`

     - Returns the version of the :binary:`~mongod` instance.

User Management Methods
-----------------------

.. important::

   The :method:`passwordPrompt()` method is currently not
   supported in ``mongosh``. As a result, when using the following
   methods you must specify the password as a parameter:

   - :method:`db.auth()`
   - :method:`db.changeUserPassword()`
   - :method:`db.createUser()`
   - :method:`db.updateUser()`

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description

   * - :method:`db.auth()`

     - Authenticates a user to a database.

   * - :method:`db.changeUserPassword()`

     - Changes an existing user’s password.

   * - :method:`db.createUser()`

     - Creates a new user.

   * - :method:`db.dropAllUsers()`

     - Deletes all users associated with a database.

   * - :method:`db.dropUser()`

     - Deletes a single user.

   * - :method:`db.getUser()`

     - Returns information about the specified user.

   * - :method:`db.getUsers()`

     - Returns information about all users associated with a database.

   * - :method:`db.updateUser()`

     - Updates a specified user's data.

   * - :method:`db.grantRolesToUser()`

     - Grants a role and its privileges to a user.

   * - :method:`db.revokeRolesFromUser()`

     - Removes a role from a user.

Role Management Methods 
-----------------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method

     - Description
 
   * - :method:`db.createRole()`

     - Creates a role and specifies its privileges.

   * - :method:`db.dropRole()`

     - Deletes a user-defined role.

   * - :method:`db.dropAllRoles()`

     - Deletes all user-defined roles associated with a database.

   * - :method:`db.getRole()`

     - Returns information for the specified role.

   * - :method:`db.getRoles()`

     - Returns information for all the user-defined roles in a
       database. 

   * - :method:`db.grantPrivilegesToRole()`

     - Assigns privileges to a user-defined role.
   
   * - :method:`db.revokePrivilegesFromRole()`

     - Removes the specified privileges from a user-defined role.
   
   * - :method:`db.grantRolesToRole()`

     - Specifies roles from which a user-defined role inherits
       privileges.
   
   * - :method:`db.revokeRolesFromRole()`

     - Removes inherited roles from a role.

   * - :method:`db.updateRole()`

     - Updates a user-defined role.
