.. _mdb-shell-write-scripts:

=======================================
Write Scripts for the {+mdb-shell+}
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can write scripts for the {+mdb-shell+} that manipulate data in
MongoDB or perform administrative operations.

This tutorial provides an introduction to writing JavaScript that uses 
the {+mdb-shell+} shell to access MongoDB.

.. _mdb-shell-open-new-connections-in-shell:

Open A New Connection
---------------------

From the {+mdb-shell+} or from a JavaScript file, you can instantiate
database connections using the :method:`Mongo()` method:

.. code-block:: javascript
   :copyable: false

   new Mongo()
   new Mongo(<host>)
   new Mongo(<host:port>)

.. note::

   The {+mdb-shell+} does not support the
   ``ClientSideFieldLevelEncryptionOptions`` parameter with the
   :method:`Mongo()` method.

Consider the following example that instantiates a new connection to the
MongoDB instance running on localhost on the default port and sets the
global ``db`` variable to ``myDatabase`` using the :method:`getDB()`
method:

.. code-block:: javascript

   conn = Mongo();
   db = conn.getDB("myDatabase");

If connecting to a MongoDB instance that enforces access control, you
must include the credentials in the :manual:`connection string
</reference/connection-string/>`. The following example shows you how
to connect to a MongoDB instance running on ``localhost`` on the default
port secured using :manual:`SCRAM </core/security-scram/>`:

.. code-block:: javascript

   conn = Mongo("mongodb://<username>:<password>@localhost:27017");

.. the manual page says to use db.auth(), which isn't implemented yet.
   this is the only way I could get it to work.
   https://docs.mongodb.com/manual/tutorial/write-scripts-for-the-mongo-shell/#opening-new-connections

.. include:: /includes/admonitions/note-redact-credentials-command-history.rst

Additionally, you can use the :method:`connect()` method to connect to
the MongoDB instance. The following example connects to the MongoDB
instance that is running on ``localhost`` with the non-default port
``27020`` and sets the global ``db`` variable:

.. code-block:: javascript

   db = connect("localhost:27020/myDatabase");

.. skipping the Differences Between Interactive and Scripted mongo
   section as most of the javascript equivalents to the shell helpers
   have not yet been implemented in mongosh -- revisit later
   https://docs.mongodb.com/manual/tutorial/write-scripts-for-the-mongo-shell/#differences-between-interactive-and-scripted-mongo

.. also skippping --eval section as I'm having issues getting it to work
   https://docs.mongodb.com/manual/tutorial/write-scripts-for-the-mongo-shell/#eval-option

Execute a JavaScript File
-------------------------

You can execute a ``.js`` file from within the {+mdb-shell+} shell,
using the ``.load`` command, as in the following: 

.. code-block:: javascript

   .load myjstest.js

This command loads and executes the ``myjstest.js`` file.

The ``.load`` command accepts relative and absolute paths. If the
current working directory of the {+mdb-shell+} shell is ``/data/db``,
and ``myjstest.js`` resides in the ``/data/db/scripts`` directory, then
the following calls within the mongo shell would be equivalent: 

.. code-block:: javascript
   :copyable: false

   .load scripts/myjstest.js
   .load /data/db/scripts/myjstest.js

.. note::

   There is no search path for the .load command. If the desired script
   is not in the current working directory or the full specified path,
   the {+mdb-shell+} will not be able to access the file.
