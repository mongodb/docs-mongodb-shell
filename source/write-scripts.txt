.. _mdb-shell-write-scripts:

=============================
Write Scripts for ``mongosh``
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can write scripts for the |mdb-shell| that manipulate data in
MongoDB or perform administrative operations.

This tutorial introduces using the |mdb-shell| with JavaScript to
access MongoDB.

.. _mdb-shell-open-new-connections-in-shell:

Open a New Connection
---------------------

From the |mdb-shell| or from a JavaScript file, you can instantiate
database connections using the :method:`Mongo()` method:

.. code-block:: javascript
   :copyable: false

   new Mongo()
   new Mongo(<host>)
   new Mongo(<host:port>)

.. note::

   The |mdb-shell| does not support the
   :manual:`ClientSideFieldLevelEncryptionOptions
   </reference/method/Mongo/#clientsidefieldlevelencryptionoptions>`
   document with the :method:`Mongo()` method.

Connect to a Local MongoDB Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a MongoDB instance running on localhost on the default port.

The following example:

- Instantiates a new connection to the instance, and
- Sets the global ``db`` variable to ``myDatabase`` using the
  :method:`Mongo.getDB()` method. 

.. code-block:: javascript

   conn = Mongo();
   db = conn.getDB("myDatabase");

Connect to a MongoDB Instance that Enforces Access Control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a MongoDB instance that enforces access control, you
must include the credentials in the :manual:`connection string
</reference/connection-string/>`. 

The following command connects to a MongoDB instance that is:

- Running on ``localhost`` on the default port, and
- Secured using :manual:`SCRAM </core/security-scram/>`.

.. code-block:: javascript

   conn = Mongo("mongodb://<username>:<password>@localhost:27017/<authDB>");

.. the manual page says to use db.auth(), which isn't implemented yet.
   this is the only way I could get it to work.
   https://docs.mongodb.com/manual/tutorial/write-scripts-for-the-mongo-shell/#opening-new-connections

.. include:: /includes/admonitions/note-redact-credentials-command-history.rst

Use ``connect()`` to Connect to a MongoDB Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can also use the :manual:`connect()
</reference/method/connect/>` method to connect to the MongoDB instance.

The following command:

- Connects to the MongoDB instance that is running on ``localhost`` with
  the non-default port ``27020``, and 
- Sets the global ``db`` variable.

.. code-block:: javascript

   db = connect("localhost:27020/myDatabase");

.. skipping the Differences Between Interactive and Scripted mongo
   section as most of the javascript equivalents to the shell helpers
   have not yet been implemented in mongosh -- revisit later
   https://docs.mongodb.com/manual/tutorial/write-scripts-for-the-mongo-shell/#differences-between-interactive-and-scripted-mongo

.. also skippping --eval section as I'm having issues getting it to work
   https://docs.mongodb.com/manual/tutorial/write-scripts-for-the-mongo-shell/#eval-option

Connection Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~

Consider portability and the operating environment when you write
scripts. 

Script Includes Connection Detail
`````````````````````````````````

If the connection details are included in the script:

- You do not need to specify connection information on the command
  line.
- You should use the ``--nodb`` parameter.

Consider a :binary:`~bin.mongod` instance running on
``localhost:27500``.

The following script prints the number of users. Copy the code and save
it as ``getUserCount.js``.

.. code-block:: javascript
   :emphasize-lines: 1

   db = connect( "localhost:27500/admin" );˘
   printjson( db.system.users.countDocuments() );

Run ``getUserCount.js``:

.. code-block:: javascript

   mongosh --nodb --file getUserCount.js

- :binary:`~bin.mongosh` defaults to port 27170.
- :binary:`~bin.mongod` is running on port 27500.
- The ``--nodb`` parameter instructs :binary:`~bin.mongosh` to run a
  script without first connecting to a :binary:`~bin.mongod` instance.

The highlighted line is correct, but ``getUserCount.js`` will not run
without ``--nodb`` because :binary:`~bin.mongosh` cannot connect to the
local instance. With ``--nodb``, :binary:`~bin.mongosh` runs
``getUserCount.js`` and uses the highlighted information to connect.

Script Does Not Include Connection Details
``````````````````````````````````````````

It is convenient to specify connection information in your script, but
that also makes it less portable. The ``getUserCount.js`` script would
have to be updated to run on a remote instance or one running on a
different port.

To increase portability, use :method:`db.getSiblingDB()` and specify
the connection information on the command line. 

The following script is more portable than ``getUserCount.js`` because
it does not have specific connection details. Copy the code and save it
as ``portableGetUserCount.js``.

.. code-block:: javascript

   db = db.getSiblingDB( "admin" );
   printjson( db.system.users.countDocuments() );

To run ``portableGetUserCount.js``, specify the host and port on the
command line:

.. code-block:: javascript

   mongosh --host 172.17.0.3 --port 27500 --file portableGetUserCount.js 

To run ``portableGetUserCount.js`` on a different host or port, change
the connection details on the command line. Unlike ``getUserCount.js``,
you do not have to edit the script to run ``portableGetUserCount.js``.

.. _mdb-shell-execute-file:

Execute a JavaScript File
-------------------------

You can execute a ``.js`` file from within the |mdb-shell|
using the :method:`load()` method.

.. example::

   The following example creates and executes a script that:

   - Connects to a local instance running on the default port.
   - Connects to the ``myDatabase`` database.
   - Populates the ``movies`` collection with sample documents.

   1. Create a file named ``connect-and-insert.js`` with the following
      contents:

      .. code-block:: javascript

         db = connect('mongodb://localhost/myDatabase');

         db.movies.insertMany( [
            {
               title: 'Titanic',
               year: 1997,
               genres: [ 'Drama', 'Romance' ],
               rated: 'PG-13',
               languages: [ 'English', 'French', 'German', 'Swedish', 'Italian', 'Russian' ],
               released: ISODate("1997-12-19T00:00:00.000Z"),
               awards: {
                  wins: 127,
                  nominations: 63,
                  text: 'Won 11 Oscars. Another 116 wins & 63 nominations.'
               },
               cast: [ 'Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates' ],
               directors: [ 'James Cameron' ]
            },
            {
               title: 'Spirited Away',
               year: 2001,
               genres: [ 'Animation', 'Adventure', 'Family' ],
               rated: 'PG',
               languages: [ 'Japanese' ],
               released: ISODate("2003-03-28T00:00:00.000Z"),
               awards: {
                  wins: 52,
                  nominations: 22,
                  text: 'Won 1 Oscar. Another 51 wins & 22 nominations.'
               },
               cast: [ 'Rumi Hiiragi', 'Miyu Irino', 'Mari Natsuki', 'Takashi Naitè' ],
               directors: [ 'Hayao Miyazaki' ]
            },
            {
               title: 'Casablanca',
               genres: [ 'Drama', 'Romance', 'War' ],
               rated: 'PG',
               cast: [ 'Humphrey Bogart', 'Ingrid Bergman', 'Paul Henreid', 'Claude Rains' ],
               languages: [ 'English', 'French', 'German', 'Italian' ],
               released: ISODate("1943-01-23T00:00:00.000Z"),
               directors: [ 'Michael Curtiz' ],
               awards: {
                  wins: 9,
                  nominations: 6,
                  text: 'Won 3 Oscars. Another 6 wins & 6 nominations.'
               },
               lastupdated: '2015-09-04 00:22:54.600000000',
               year: 1942
            }
         ] )

   #. To load and execute the ``connect-and-insert.js`` file, run the
      following command from ``mongosh``:

      .. code-block:: javascript

         load("connect-and-insert.js")

   #. To confirm that the documents loaded correctly, use the
      ``myDatabase`` collection and query the ``movies`` collection.

      .. code-block:: javascript

         use myDatabase
         db.movies.find()

The :method:`load()` method accepts relative and absolute paths. If the
current working directory of the |mdb-shell| is ``/data/db``, and
``connect-and-insert.js`` is in the ``/data/db/scripts`` directory, then
the following calls within the |mdb-shell| are equivalent: 

.. code-block:: javascript
   :copyable: false

   load("scripts/connect-and-insert.js")
   load("/data/db/scripts/connect-and-insert.js")

.. note::

   There is no search path for the :method:`load()` method. If the target
   script is not in the current working directory or the full specified
   path, the |mdb-shell| cannot access the file.

.. toctree::
   :titlesonly:

   /write-scripts/require-external-modules
   /write-scripts/require-load-differences
   /write-scripts/scoping

