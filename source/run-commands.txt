.. _run-commands:

=================
``mongosh`` Usage
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

To run commands in ``mongosh``, you must first
:ref:`connect to a MongoDB deployment <mdb-shell-connect>`. 

Switch Databases
----------------

To display the database you are using, type ``db``:

.. code-block:: sh

   db

The operation should return ``test``, which is the default database.

To switch databases, issue the ``use <db>`` helper, as in the
following example:

.. code-block:: javascript

   use <database>

To access a different database from the current database without
switching your current database context, see the
:method:`db.getSiblingDB()` method.

To list the databases available to the user, use the helper ``show
dbs``.

Create a New Database and Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create a new database, issue the ``use <db>`` command with the
database that you would like to create. For example, the following
commands create both the database ``myNewDatabase`` and the
:term:`collection` ``myCollection`` using the
:method:`~db.collection.insertOne()` operation:

.. code-block:: javascript

   use myNewDatabase
   db.myCollection.insertOne( { x: 1 } );

If a collection does not exist, MongoDB creates the collection when you
first store data for that collection.

Insert Data into a Collection
-----------------------------

The :method:`db.myCollection.insertOne() <db.collection.insertOne()>` is one
of the :doc:`methods available in mongosh </reference/methods>`.

- ``db`` refers to the current database.

- ``myCollection`` is the name of the collection.

If ``mongosh`` does not accept the name of a collection,
you can use the alternative :method:`db.getCollection()` syntax.
For instance, if a collection name contains a space or hyphen, starts
with a number, or conflicts with a built-in function:

.. code-block:: javascript

   db.getCollection("3 test").find()
   db.getCollection("3-test").find()
   db.getCollection("stats").find()

For more documentation of basic MongoDB operations in ``mongosh``, see:

- :doc:`/crud/insert`
- :doc:`/crud/read`
- :doc:`/crud/update`
- :doc:`/crud/delete`
- :doc:`/reference/methods`

.. _mongoshrc-js:

``.mongoshrc.js`` File
----------------------

On startup, ``mongosh`` checks the user's ``HOME`` directory for a
JavaScript file named ``.mongoshrc.js``. If this file is found,
``mongosh`` interprets the content of ``.mongoshrc.js`` before
displaying the prompt for the first time.

If you use the shell to evaluate a JavaScript file or expression,
either by using the :option:`--eval <mongosh --eval>` option on the
command line or by specifying
:ref:`a .js file to mongosh <mdb-shell-execute-file>`, ``mongosh``
reads the ``.mongoshrc.js`` file *after* the JavaScript has finished
processing. You can prevent ``.mongoshrc.js`` from being loaded by
using the :option:`--norc <mongosh --norc>` option.

.. note::

   The legacy :binary:`~bin.mongo` shell used a configuation file
   called ``.mongorc.js``. If ``mongosh`` detects this file on startup,
   and ``.mongoshrc.js`` is not present, ``mongosh`` will suggest
   renaming ``.mongorc.js`` to ``.mongoshrc.js``. 

   The legacy ``.mongorc.js`` file will not be loaded.


Terminate a Running Command
---------------------------

To terminate a running command or query in :binary:`~bin.mongosh`,
press ``Ctrl + C``.

When you enter ``Ctrl + C``, :binary:`~bin.mongosh`: 

- interrupts the active command,
- tries to terminate the ongoing, server-side operation, and
- returns a command prompt.

If :binary:`~bin.mongosh` cannot cleanly terminate the running process,
it issues a warning. 

.. note::

   Pressing ``Ctrl + C`` in :binary:`~bin.mongosh` does not terminate
   asynchronous code. Asynchronous operations such as ``setTimeout`` or
   operations like ``fs.readFile`` continue to run.

   There is no way to terminate asynchronous code in
   :binary:`~bin.mongosh`. This is the same behavior as in the Node.js
   `REPL <https://nodejs.org/api/repl.html>`__.

Pressing ``Ctrl + C`` once will not exit :binary:`~bin.mongosh`, press
``Ctrl + C`` twice to  exit :binary:`~bin.mongosh`.

Command Exceptions
------------------

In scenarios where the output of a command includes ``{ ok: 0 }``,
``mongosh`` throws an exception and does not return the raw output from
the server.

.. note::

   In the legacy ``mongo`` shell, when a command's output included ``{
   ok: 0 }``, the behavior differs between commands. ``mongosh``
   provides consistent behavior by always throwing an exception in these
   scenarios.

Clear the ``mongosh`` Console
-----------------------------

The ``cls`` command clears the console. You can also clear the console
with ``Ctrl + L`` and ``console.clear()``.

.. toctree::
   :titlesonly:
   
   /crud
   /run-agg-pipelines
   /telemetry
